import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
import * as turf from '@turf/turf'
import { googlePlacesApiManager } from '../../googleAPI/googlePlacesApiManager'
import { dummyGoogleCall } from '../../googleAPI/dummyCall.js'
import { store } from '../../store'
import { checksumManager } from '../../data/checksumManager'
import { buildModal } from '../modal/modalSlice'
import axios from 'axios'
import { unwrapResult } from "@reduxjs/toolkit";

const initialState = {
// == api call meta ==
  buildingSearch: false,
  loading: false,
  nearbySearchComplete: false,
  error: '',
  searchActive: false,
  priorSearch: false,
  bulkSearchRunning: false,

// == api data ==
  searchID: '',
  // lon lat
  nextCenter: null,
  lastSearchRadius: null,
  searchedCoords: [],
  unsearchedCoords: [],
  googleData: [],

// == search config ==
  bulkSearchMode: false,
  searchReady: false,
  searchComplete: false,
  bulkSearchCount: 0,
}


const debounce = (target, flag) => {
  if (!flag) {
    store.dispatch(target())
  }
}

export const debouncedSingleSearch = () => {
  debounce(singleSearch, store.getState().search.loading)
}

export const debouncedBulkSearch = () => {
  debounce(bulkSearch, store.getState().search.bulkSearchRunning)
}


export const initializeSearch = createAsyncThunk('searchSlice/initializeSearch',(a, b) => {
  const polygonCoordinates = b.getState().map.polygonCoordinates
  const searchResolution = b.getState().settingsPanel.searchResolution

  return axios
    .post(`/api/searchSession`, {
    "searchRegions": polygonCoordinates,
    "searchID": null,
    "coordinateResolution": searchResolution
    })
    .then((response) => response.data)
    .catch((error) => {
      console.log(error.msg)
    })
})

export const syncBackend = createAsyncThunk('searchSlice/syncBackend', async (a, b) => {
    // add search key to data packet
    // search key should be a random number generated by client
    console.log("sync run")
    const searchedCoords = b.getState().search.searchedCoords
    const unsearchedCoords = b.getState().search.unsearchedCoords
    const searchID = b.getState().search.searchID

    let data = await axios
    .put(`/api/loadSearch`, {
      "searched": searchedCoords,
      "unsearched": unsearchedCoords,
      "searchID": searchID,
      })
      .then((result) => {
        console.log("sync successful")
        return result
      })
      .catch((error) => {
        console.log("sync failed")
        return error.msg
      })
})

// could move then / catch from searchPlaces to here,
// chaining off selected action?
export const singleSearch = createAsyncThunk('searchSlice/singleSearch', async (a, b) => {
    let selectedAction = await buildModal({
      "alertKey": 'search',
      "data": null,
      "confirmCallback": () => {
        console.log("confirm debouncedSingleSearch")
        return store.dispatch(searchPlaces())
      },
      "denyCallback": (error) => {
        console.log(error)
        }
    })
    let returned = await selectedAction()
    return unwrapResult(returned)
})

export const bulkSearch = createAsyncThunk('searchSlice/bulkSearch', async (a, b) => {
  let selectedAction = await buildModal({
    "alertKey": 'bulkSearch',
    "data": null,
    "confirmCallback": async () => {
      for (let i=0; i < store.getState().search.bulkSearchCount; i++) {
        unwrapResult(await b.dispatch(singleSearch()))
      }
    },
    "denyCallback": (error) => {
      console.log(error)
      }
  })
  await selectedAction()
})

function searchCallback(results, status, kwargs){
  console.log("+++++ searchCallback ++++")
  console.log(results)
  console.log(status)
  let zero_results = "ZERO_RESULTS"
  let ok = "OK"
  const {
    testMode,
    nextCenter,
    searchID,
    resolve,
    reject
  } = kwargs

  if (testMode
    || status == ok
    || status == zero_results) {
    results.forEach((item, i) => {
      delete item.opening_hours
      delete item.permanently_closed
    });
    let options = {units: 'miles'};
    results = JSON.parse(JSON.stringify(results))
    let radius;
    if (status == ok) {
      let testRadius = Math.random() * (1.5 - .1) + .1;
      let lastLat = results[results.length-1].geometry.location.lat
      let lastLon = results[results.length-1].geometry.location.lng
      let from = turf.point(nextCenter);
      let to = turf.point([lastLon, lastLat]);
      radius = testMode ? testRadius : turf.distance(from, to, options);
      console.log(radius)
    } else {
      radius = 4
    }
    // let options = {units: 'miles'};
    let polygon = turf.circle(nextCenter, radius, options);
    console.log(polygon)
    let searchPerimeter = polygon.geometry.coordinates[0];

    processGoogleData(searchID, searchPerimeter)
    // processGoogleDataForceMismatch(searchID, searchPerimeter)
      .then((apiData) => {
        resolve({
          "lastSearchPerimeter": searchPerimeter,
          "googleData": results,
          "apiData": apiData.data
        })
      })
      .catch((error) => {
        reject(error)
      })
  }
  else {
    console.log(results)
  }
}

function processGoogleData(searchID, searchPerimeter) {
  let options = {
    steps: 20,
    units: 'miles',
    options: {}
  };
  return axios
    .put(`/api/searchSession`, {
      "circleCoordinates": searchPerimeter,
      "searchID": searchID,
      "checksum": checksumManager.dataChecksum()
    })
  }

// for testing
function processGoogleDataForceMismatch(searchID, searchPerimeter) {
    let options = {
      steps: 20,
      units: 'miles',
      options: {}
    };
    return axios
      .put(`/api/searchSession`, {
        "circleCoordinates": searchPerimeter,
        "searchID": searchID,
        "checksum": '9999999'
      })
    }

function googleAuthErrorHook(reject) {
  window.gm_authFailure = function() {
    googlePlacesApiManager.updateGoogleApi(store.getState().search.apiKey)
    let selection = window.confirm(
      'Google Maps API failed to load. Please check that your API key is correct' +
      ' and that the key is authorized for Google\'s "Maps JavaScript API" and "Places API".' +
      ' This can be done from the Google Cloud Console.' +
      '\n \n' +
      'Click "OK" to be taken to the instruction page for creating Google API keys and enabling the required APIs' +
      ' at the below URL:\n \n' +
      'https://developers.google.com/maps/documentation/javascript/get-api-key'
    )
   if (selection) {
     reject()
     window.open('https://developers.google.com/maps/documentation/javascript/get-api-key', '_blank', 'noopener,noreferrer');
   } else {
     reject()
   }
  }
}

export const searchPlaces = createAsyncThunk('searchSlice/searchPlaces', (a, b) => {
  let kwargs = {
    coords: b.getState().search.nextCenter,
    searchType: b.getState().settingsPanel.searchEntityType,
    testMode: b.getState().settingsPanel.testMode,
    nextCenter: b.getState().search.nextCenter,
    searchID: b.getState().search.searchID,
  }

  let origin = {lat: kwargs.coords[1], lng: kwargs.coords[0]};
  let request = {
    location: origin,
    rankBy: 1,
    type: kwargs.searchType
    };

  return new Promise((resolve, reject) => {
    kwargs['resolve'] = resolve
    kwargs['reject'] = reject

    googleAuthErrorHook(b.abort, reject)

    if (b.getState().settingsPanel.testMode) {
      dummyGoogleCall(request, (result, status) => searchCallback(result, status, kwargs))
    }
    else {
      let service = googlePlacesApiManager.service
      let func = service.nearbySearch
      let nbs = service.nearbySearch(request, (result, status) => searchCallback(result, status, kwargs));
    }
  })
  .then((result) => {
    return result
  })
  .catch((error) => {
    if (error.response.status == 409) {
      b.dispatch(syncBackend())
    }
    return error
  })
})


// ============ Reducers ====================
export const searchSlice = createSlice({
  name: 'searchSlice',
  initialState,
  extraReducers: (builder) => {
    builder.addCase(searchPlaces.pending, (state, action) => {
      state.loading = true
      state.error = ''
    })
    builder.addCase(searchPlaces.fulfilled, (state, action) => {
      // console.log(action.payload)
      state.loading = false
      state.error = ''
      state.nearbySearchComplete = true
      state.nextCenter = action.payload.apiData.center
      state.searchedCoords = action.payload.apiData.searched
      state.unsearchedCoords = action.payload.apiData.unsearched
      state.googleData = [...state.googleData, ...action.payload.googleData]
    })
    builder.addCase(searchPlaces.rejected, (state, action) => {
      state.loading = false
      state.error = action.error.message
    })
    builder.addCase(bulkSearch.pending, (state, action) => {
      state.bulkSearchRunning = true
      state.error = ''
    })
    builder.addCase(bulkSearch.fulfilled, (state, action) => {
      console.log(action.payload)
      state.bulkSearchRunning = false

    })
    builder.addCase(bulkSearch.rejected, (state, action) => {
      state.bulkSearchRunning = false
    })
    builder.addCase(initializeSearch.pending, (state) => {
      state.loading = true
      state.buildingSearch = true
      state.searchActive = true
    })
    builder.addCase(initializeSearch.fulfilled, (state, action) => {
      console.log("received initialize")
      console.log(action.payload)
      console.log("received unsearched")
      console.log(action.payload.unsearchedCoords)
      state.loading = false
      state.buildingSearch = false
      state.nextCenter = action.payload.furthestNearest
      state.searchedCoords = action.payload.searchedCoords
      state.unsearchedCoords = action.payload.unsearchedCoords
      state.searchID = action.payload.searchID.lastRowID
      state.error = ''
    })
    builder.addCase(initializeSearch.rejected, (state, action) => {
      state.loading = false
      state.buildingSearch = false
      state.error = action.error.message
      state.searchActive = false
    })
    builder.addCase(syncBackend.pending, (state, action) => {
      console.log("syncBackend started")
    })
    builder.addCase(syncBackend.fulfilled, (state, action) => {
      console.log("syncBackend fulfilled")
      state.loading = false
      state.error = ''
    })
    builder.addCase(syncBackend.rejected, (state, action) => {
      console.log("syncBackend rejected")
      state.loading = false
      state.error = action.error.message
    })
  },
  reducers: {
    loadStateFromFile: (state, action) => {
      let file = action.payload

      state.searchActive = true
      state.searchID = file.searchID
      state.nextCenter = file.nextCenter
      state.lastSearchRadius = file.lastSearchRadius
      state.searchedCoords = file.searchedCoords
      state.unsearchedCoords = file.unsearchedCoords
      state.googleData = file.googleData
    },
    setBulkSearchRunning: (state, action) => {state.bulkSearchRunning = action.payload},
    setPriorSearch: (state, action) => {state.priorSearch = action.payload},
    setSearchActive: (state, action) => {state.searchActive = action.payload},
    addSearchCallType: (state, action) => {state.searchCallType = action.payload},
    setSearchReady: (state, action) => {state.searchReady = action.payload},
    setSearchComplete: (state, action) => {state.searchComplete = action.payload},
    setBulkSearchCount: (state, action) => {state.bulkSearchCount = action.payload},
    setBulkSearchMode: (state, action) => {state.bulkSearchMode = action.payload},
    setNearbySearchComplete: (state, action) => {state.nearbySearchComplete = action.payload},
  },
})

export const {
  addSearchCallType,
  setSearchReady,
  setSearchComplete,
  setBulkSearchCount,
  setBulkSearchMode,
  loadStateFromFile,
  setPriorSearch,
  setNearbySearchComplete,
  setBulkSearchRunning
} = searchSlice.actions
export default searchSlice.reducer
